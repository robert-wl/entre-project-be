// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}

model User {
  id         Int     @id @default(autoincrement())
  email      String  @unique
  name       String
  password   String
  phoneNo    String
  profilePic String? @db.LongText

  ownedTrips    Trip[]        @relation("OwnedTrips")
  memberOfTrips Trip[]
  bill          Bill[]
  billDetail    BillDetail[]
  destination   Destination[]
  itinerary     Itinerary[]
  AlbumDetail   AlbumDetail[]
}

model Trip {
  id          Int    @id @default(autoincrement())
  name        String
  description String
  ownerId     Int

  owner        User          @relation("OwnedTrips", fields: [ownerId], references: [id])
  members      User[]
  destinations Destination[]
  bills        Bill[]
  tripDetail   TripDetail[]
}

model Destination {
  id                 Int    @id @default(autoincrement())
  destination        String
  notes              String
  image              String @db.LongText
  tripId             Int
  destinationOwnerId Int

  destinationOwner User @relation(fields: [destinationOwnerId], references: [id])
  trip             Trip @relation(fields: [tripId], references: [id])
}

model Bill {
  id          Int      @id @default(autoincrement())
  tripId      Int
  date        DateTime
  name        String
  billOwnerId Int

  billOwner   User         @relation(fields: [billOwnerId], references: [id])
  trip        Trip         @relation(fields: [tripId], references: [id])
  billDetails BillDetail[]
}

model BillDetail {
  id         Int     @id @default(autoincrement())
  billId     Int
  userId     Int
  paid       Boolean
  totalPrice Float

  user      User       @relation(fields: [userId], references: [id])
  bill      Bill       @relation(fields: [billId], references: [id])
  billItems BillItem[]
}

model BillItem {
  id           Int    @id @default(autoincrement())
  billDetailId Int
  itemName     String
  price        Float
  quantity     Int

  billDetail BillDetail @relation(fields: [billDetailId], references: [id])
}

model TripDetail {
  id          Int      @id @default(autoincrement())
  tripId      Int
  date        DateTime
  location    String
  description String
  price       Float
  photo       Bytes    @db.LongBlob()

  trip Trip @relation(fields: [tripId], references: [id])
}

model Itinerary {
  id               Int      @id @default(autoincrement())
  tripId           Int
  startDate        DateTime
  endDate          DateTime
  itineraryOwnerId Int

  itineraryDetails ItineraryDetail[]
  itineraryOwner   User              @relation(fields: [itineraryOwnerId], references: [id])
}

model ItineraryDetail {
  id          Int      @id @default(autoincrement())
  date        DateTime
  itineraryId Int

  itineraryItems ItineraryItem[]
  itineraryItem  Itinerary       @relation(fields: [itineraryId], references: [id])
}

model ItineraryItem {
  id                Int    @id @default(autoincrement())
  startHour         String
  endHour           String
  detailName        String
  itineraryDetailId Int

  itineraryDetail ItineraryDetail @relation(fields: [itineraryDetailId], references: [id])
}

model Album {
  id   Int    @id @default(autoincrement())
  name String

  albumDetail AlbumDetail[]
}

model AlbumDetail {
  id      Int    @id @default(autoincrement())
  name    String
  albumId Int
  userId  Int
  photo   Bytes  @db.LongBlob()

  user  User  @relation(fields: [userId], references: [id])
  album Album @relation(fields: [albumId], references: [id])
}
